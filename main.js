/*----------------------------------------------Boiler Code Start-------------------------------------------------------------------------------------------- */
function Animation(spriteSheet, startX, startY, frameWidth, frameHeight, frameDuration, frames, loop, reverse) {
    this.spriteSheet = spriteSheet;
    this.startX = startX;
    this.startY = startY;
    this.frameWidth = frameWidth;
    this.frameDuration = frameDuration;
    this.frameHeight = frameHeight;
    this.frames = frames;
    this.totalTime = frameDuration * frames;
    this.elapsedTime = 0;
    this.loop = loop;
    this.reverse = reverse;
}
Animation.prototype.drawFrame = function (tick, ctx, x, y, scaleBy) {
    var scaleBy = scaleBy || 1; //The size of the sprite. 1 = 100%
    this.elapsedTime += tick;
    if (this.loop) {
        if (this.isDone()) {
            this.elapsedTime = 0;
        }
    } else if (this.isDone()) {
        return;
    }
    var index = this.reverse ? this.frames - this.currentFrame() - 1 : this.currentFrame();
    var vindex = 0;
    if ((index + 1) * this.frameWidth + this.startX > this.spriteSheet.width) {
        index -= Math.floor((this.spriteSheet.width - this.startX) / this.frameWidth);
        vindex++;
    }
    while ((index + 1) * this.frameWidth > this.spriteSheet.width) {
        index -= Math.floor(this.spriteSheet.width / this.frameWidth);
        vindex++;
    }

    var locX = x;
    var locY = y;
    var offset = vindex === 0 ? this.startX : 0;
    ctx.drawImage(this.spriteSheet,
        index * this.frameWidth + offset, vindex * this.frameHeight + this.startY, // source from sheet
        this.frameWidth, this.frameHeight,
        locX, locY,
        this.frameWidth * scaleBy,
        this.frameHeight * scaleBy);
}
Animation.prototype.currentFrame = function () {
    return Math.floor(this.elapsedTime / this.frameDuration);
}
Animation.prototype.isDone = function () {
    return (this.elapsedTime >= this.totalTime);
}
/*----------------------------------------------Boiler Code End---------------------------------------------------------------------------------------------- */

/*----------------------------------------------Dungeon Procedural Generation Start-------------------------------------------------------------------------- */
// random number generator
function generateRandomNumber(minValue, maxValue) {
    let randomNumber = Math.random() * (maxValue - minValue) + minValue;
    return Math.floor(randomNumber);
}
// Base shapes
// create rectangle room
function generateRectangle(minX, maxX, minY, maxY) {
    var x = generateRandomNumber(minX, maxX);
    var y = generateRandomNumber(minY, maxY);
    var recArea = x * y;
    var rectangle = new Array(recArea);
    var currentLevel = 1;
    for (var i = 0; i < recArea; i++) {
        if (((i > recArea - x - 1) && i != recArea - 1) || (i < x && i != 0)) {
            rectangle[i] = 2;
        }
        else if ((i % x == 0) || ((i + 1) % x == 0)) {
            rectangle[i] = 1;
        }
        else {
            rectangle[i] = 7;
        }
    }
    rectangle[0] = 3;
    rectangle[x - 1] = 4;
    rectangle[recArea - x] = 5;
    rectangle[recArea - 1] = 6;
    rectangle.push(x);
    rectangle.push(y);
    return rectangle;
}
// create circular room

// create half cirular room


// level Generation (88x33)
var worldGeneration = new Array(
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
);


// generate first room and get dimensions
var vDirection;
var hDirection;
var startingPosition = generateRandomNumber(0, 524);
var currentPosition = startingPosition;
var firstRoom = generateRectangle(6, 50, 6, 50);
var xDimension = firstRoom[firstRoom.length - 2];
var yDimension = firstRoom[firstRoom.length - 1]
var roomArea = xDimension * yDimension;
var offset = 25 - xDimension;
var tileCount = 0;
// correct starting position for copy
if (startingPosition % 25 >= xDimension) {
    hDirection = "left";
}
else {
    hDirection = "right";
}
if (Math.ceil(startingPosition / 25) >= yDimension) {
    vDirection = "up";
}
else {
    vDirection = "down";
}
if (hDirection == "left" && vDirection == "up") {
    startingPosition = startingPosition - (xDimension + (yDimension * 25));
}
else if (hDirection == "left" && vDirection == "down") {
    startingPosition = (startingPosition - xDimension) + (yDimension * 25);
}
else if (hDirection == "right" && vDirection == "up") {
    startingPosition = (startingPosition + xDimension) - (yDimension * 25);
}
else {
    // do nothing
}
// copy room to game world
for (var i = 0; i < roomArea; i++) {
    if (tileCount < xDimension && firstRoom[i] != 0) {
        worldGeneration[currentPosition] = firstRoom[i];
        currentPosition++;
        tileCount++;
    }
    else if (tileCount < xDimension && firstRoom[i] == 0) { // skipping the blank tiles
        currentPosition++;
        tileCount++;
    }
    if (tileCount == xDimension) {
        tileCount = 0;
        currentPosition += offset;
    }
}
/*----------------------------------------------Dungeon Procedural Generation End---------------------------------------------------------------------------- */

/*----------------------------------------------Dungeon Array for level 1 Start------------------------------------------------------------------------------ */
/*
 * Slime Dungeon Level 1 (88x33) each number is a 32x32 pixel area
 * 0 = no block (should layer background image so these are not just a solid color)
 * 1-4 = alternating horizontal wall tiles, 5 = Vertical wall tile, 6 = Top Left L shaped corner, 7 = Top Right L shaped corner,
 * 8 = Bottom Left L shaped corner, 9 = Bottom Right L shaped corner, 10 = North T shaped wall, 11 = East T shaped wall,
 * 12 = West T shaped wall, 13 = South T shaped wall, 14 = + shaped wall, 15 = Horizontal wall with door,
 * 16 = North floor, 17 = East floor, 18 = West floor, 19 = South floor, 20 = Top Left L floor, 21 = Top Right L floor,
 * 22 = Bottom Left L floor, 23 = Bottom Right L floor, 24 = Center floor, 25 = silver key platform floor, 26 = gold key platform floor,
 * 27 = healing potion floor, 28 = Soul Jar floor, 
 * 33 = player starting Position floor, 34 = sorcererVillain starting position floor, 35 = slimeEnemy starting position floor,
 * 36 = slimeBehemoth starting position floor, 37 = wizard starting position, 38 = skeleton starting position.
 */
var slimeDungeonLevelOne = new Array(
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 1, 2, 1, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 1, 2, 1, 7, 0, 0, 0, 0, 6, 3, 4, 7, 0, 0, 0, 0, 6, 1, 1, 2, 1, 4, 1, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 20, 16, 21, 12, 1, 2, 1, 2, 1, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 2, 20, 16, 21, 3, 7, 0, 6, 2, 1, 20, 21, 2, 1, 7, 0, 6, 3, 20, 16, 16, 16, 16, 25, 12, 1, 2, 2, 2, 2, 1, 7, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 6, 1, 2, 1, 1, 2, 2, 1, 3, 4, 1, 1, 1, 2, 2, 1, 1, 1, 3, 1, 1, 2, 1, 11, 18, 28, 17, 5, 20, 16, 16, 16, 21, 1, 7, 0, 0, 0, 6, 1, 2, 1, 10, 10, 4, 1, 20, 24, 24, 24, 21, 2, 10, 1, 20, 16, 24, 24, 16, 21, 1, 2, 11, 20, 24, 24, 19, 19, 19, 23, 5, 20, 16, 16, 16, 16, 21, 1, 3, 1, 4, 7, 0, 0,
    0, 0, 0, 0, 5, 20, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 21, 5, 22, 19, 23, 5, 22, 19, 19, 24, 24, 21, 3, 1, 2, 1, 4, 20, 16, 21, 3, 4, 20, 16, 24, 24, 24, 24, 24, 21, 1, 20, 24, 24, 24, 24, 24, 24, 16, 21, 5, 22, 24, 17, 6, 1, 2, 1, 3, 18, 24, 19, 19, 19, 24, 16, 16, 16, 25, 5, 0, 0,
    0, 0, 0, 0, 5, 18, 24, 24, 24, 24, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 24, 36, 1, 3, 15, 4, 1, 1, 1, 2, 18, 24, 24, 16, 16, 16, 16, 16, 24, 24, 24, 16, 16, 24, 19, 24, 24, 24, 24, 24, 24, 16, 24, 24, 24, 24, 24, 24, 24, 24, 17, 2, 7, 18, 17, 5, 20, 16, 16, 16, 24, 23, 6, 10, 7, 18, 24, 24, 24, 17, 5, 0, 0,
    0, 0, 0, 0, 5, 18, 24, 24, 24, 17, 1, 2, 1, 10, 1, 2, 1, 2, 3, 4, 1, 1, 2, 1, 7, 18, 24, 16, 16, 16, 16, 16, 16, 16, 16, 24, 24, 24, 24, 24, 19, 19, 19, 19, 19, 19, 19, 24, 17, 5, 22, 24, 24, 24, 24, 19, 19, 19, 19, 24, 24, 24, 24, 24, 24, 24, 21, 5, 18, 17, 5, 18, 24, 19, 19, 23, 6, 1, 1, 5, 22, 19, 19, 19, 23, 5, 0, 0,
    0, 0, 0, 0, 5, 18, 24, 24, 24, 24, 16, 16, 21, 5, 20, 16, 16, 16, 16, 16, 16, 16, 16, 28, 5, 18, 24, 24, 24, 24, 24, 24, 24, 19, 19, 24, 24, 24, 24, 17, 6, 10, 10, 10, 1, 1, 7, 18, 17, 1, 7, 18, 24, 24, 17, 1, 10, 10, 7, 18, 24, 24, 24, 24, 24, 24, 17, 5, 18, 17, 5, 18, 17, 2, 1, 1, 2, 20, 21, 3, 1, 2, 1, 1, 1, 4, 7, 0,
    0, 0, 0, 0, 5, 22, 19, 19, 19, 19, 19, 24, 17, 5, 18, 24, 24, 24, 24, 19, 19, 19, 19, 23, 5, 18, 24, 24, 24, 24, 24, 24, 23, 6, 1, 18, 24, 24, 24, 17, 2, 1, 2, 11, 27, 21, 5, 18, 24, 21, 1, 18, 24, 24, 24, 21, 12, 1, 1, 18, 24, 24, 24, 24, 24, 24, 17, 5, 18, 17, 5, 18, 24, 16, 16, 16, 16, 24, 24, 16, 16, 16, 16, 16, 16, 21, 5, 0,
    0, 0, 0, 6, 1, 1, 2, 1, 1, 10, 7, 18, 17, 5, 18, 35, 24, 24, 17, 6, 10, 10, 10, 1, 11, 22, 19, 19, 19, 19, 19, 23, 6, 1, 20, 24, 24, 24, 24, 24, 16, 16, 21, 5, 18, 17, 2, 7, 22, 24, 16, 24, 24, 24, 24, 17, 3, 20, 16, 24, 24, 24, 24, 24, 24, 24, 17, 5, 18, 17, 5, 22, 24, 24, 24, 24, 24, 19, 19, 19, 19, 19, 19, 19, 24, 17, 5, 0,
    0, 0, 6, 4, 20, 16, 16, 16, 21, 4, 3, 18, 17, 5, 18, 24, 24, 24, 17, 1, 14, 14, 2, 24, 1, 1, 2, 3, 2, 4, 2, 1, 1, 20, 24, 24, 24, 24, 24, 24, 24, 24, 17, 5, 18, 24, 21, 4, 7, 22, 19, 19, 19, 19, 24, 24, 16, 24, 24, 19, 24, 24, 19, 19, 19, 19, 23, 5, 18, 17, 1, 7, 18, 24, 24, 24, 17, 1, 1, 1, 1, 1, 1, 1, 18, 17, 4, 7,
    0, 6, 1, 20, 24, 24, 19, 24, 24, 16, 16, 24, 17, 5, 22, 24, 24, 24, 24, 21, 1, 11, 20, 24, 16, 16, 16, 16, 16, 16, 16, 16, 16, 24, 24, 24, 24, 24, 24, 24, 24, 24, 17, 5, 18, 24, 24, 21, 1, 2, 1, 3, 4, 7, 22, 19, 24, 24, 23, 5, 18, 17, 6, 4, 1, 1, 1, 3, 18, 24, 21, 5, 18, 24, 24, 24, 24, 16, 16, 16, 16, 16, 16, 16, 24, 24, 21, 5,
    0, 5, 20, 24, 24, 23, 5, 18, 24, 19, 19, 24, 17, 4, 7, 18, 24, 24, 24, 24, 21, 5, 37, 24, 19, 19, 19, 19, 19, 19, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 17, 5, 18, 24, 24, 24, 16, 16, 16, 16, 21, 12, 1, 7, 22, 23, 6, 4, 18, 17, 1, 20, 16, 16, 16, 16, 24, 24, 17, 5, 18, 24, 24, 24, 19, 19, 19, 19, 19, 24, 24, 24, 24, 24, 17, 5,
    0, 5, 18, 24, 17, 1, 1, 18, 17, 6, 7, 22, 24, 21, 2, 7, 19, 19, 19, 19, 23, 5, 18, 17, 6, 4, 3, 4, 3, 7, 22, 19, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 17, 5, 18, 24, 24, 24, 24, 19, 24, 24, 23, 5, 24, 1, 1, 1, 4, 20, 24, 24, 16, 24, 24, 24, 24, 24, 24, 24, 17, 5, 22, 24, 24, 23, 6, 3, 2, 4, 7, 18, 24, 19, 19, 19, 23, 5,
    0, 5, 18, 24, 24, 16, 16, 24, 23, 12, 1, 7, 22, 24, 21, 1, 1, 3, 15, 4, 2, 11, 18, 17, 5, 20, 16, 16, 21, 1, 1, 7, 22, 19, 19, 19, 19, 24, 24, 24, 19, 19, 23, 5, 22, 19, 19, 19, 23, 5, 22, 23, 6, 11, 18, 16, 16, 16, 16, 24, 19, 19, 19, 24, 24, 24, 24, 24, 24, 24, 38, 2, 7, 22, 23, 6, 4, 20, 16, 21, 1, 18, 17, 1, 2, 1, 10, 9,
    0, 5, 22, 24, 24, 24, 19, 23, 6, 1, 24, 1, 7, 22, 24, 16, 16, 16, 16, 16, 21, 5, 18, 17, 5, 22, 19, 24, 24, 16, 21, 1, 1, 2, 4, 1, 7, 22, 19, 23, 6, 1, 4, 2, 1, 1, 2, 4, 3, 1, 15, 1, 3, 1, 18, 24, 24, 19, 19, 23, 6, 4, 7, 18, 24, 24, 24, 24, 24, 24, 24, 21, 1, 2, 2, 1, 20, 24, 24, 24, 16, 24, 24, 16, 16, 21, 5, 0,
    0, 8, 7, 18, 24, 23, 6, 1, 2, 20, 24, 21, 1, 7, 22, 19, 19, 19, 19, 24, 17, 5, 18, 17, 1, 4, 7, 22, 24, 24, 24, 16, 16, 16, 16, 21, 4, 1, 1, 2, 11, 20, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 24, 19, 23, 6, 10, 1, 1, 24, 5, 18, 24, 24, 24, 24, 24, 24, 24, 24, 16, 16, 16, 16, 24, 24, 24, 24, 19, 19, 19, 24, 24, 17, 5, 0,
    0, 0, 5, 18, 17, 6, 4, 20, 16, 24, 24, 24, 21, 1, 4, 15, 3, 10, 7, 18, 17, 5, 18, 24, 16, 21, 1, 7, 22, 24, 24, 24, 24, 24, 24, 24, 16, 16, 16, 21, 5, 22, 24, 19, 19, 19, 19, 19, 19, 19, 24, 24, 19, 19, 23, 6, 4, 3, 11, 20, 16, 17, 5, 22, 19, 24, 24, 24, 24, 24, 24, 24, 19, 19, 19, 19, 19, 24, 24, 17, 6, 1, 1, 18, 24, 17, 5, 0,
    0, 0, 5, 18, 17, 5, 20, 24, 24, 19, 19, 24, 24, 16, 16, 16, 21, 12, 11, 18, 17, 5, 18, 24, 24, 24, 21, 1, 7, 18, 24, 24, 24, 24, 24, 24, 24, 24, 24, 17, 1, 7, 24, 6, 1, 2, 2, 4, 3, 7, 18, 17, 6, 1, 1, 3, 20, 21, 5, 18, 24, 17, 2, 2, 7, 22, 19, 24, 24, 24, 19, 23, 6, 3, 2, 2, 7, 22, 24, 17, 5, 20, 16, 24, 24, 17, 4, 7,
    0, 0, 5, 18, 17, 5, 18, 24, 17, 6, 7, 22, 19, 24, 24, 24, 17, 12, 2, 18, 17, 5, 18, 24, 24, 24, 24, 21, 5, 18, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 21, 1, 15, 11, 20, 16, 16, 16, 21, 1, 18, 17, 1, 20, 16, 16, 24, 17, 5, 22, 19, 24, 16, 21, 1, 2, 7, 22, 19, 23, 6, 4, 2, 20, 16, 21, 1, 7, 18, 17, 1, 18, 24, 24, 24, 24, 21, 5,
    0, 0, 5, 18, 17, 5, 27, 19, 23, 12, 14, 1, 7, 22, 24, 24, 17, 5, 20, 24, 17, 5, 18, 24, 24, 24, 24, 17, 5, 18, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 16, 21, 5, 18, 24, 24, 24, 24, 16, 24, 24, 16, 24, 24, 24, 24, 17, 1, 2, 1, 18, 24, 24, 16, 21, 4, 1, 1, 1, 4, 20, 16, 24, 24, 24, 21, 5, 18, 24, 16, 24, 24, 24, 24, 24, 17, 5,
    6, 1, 1, 18, 17, 1, 1, 4, 1, 2, 11, 25, 3, 7, 22, 24, 23, 5, 18, 24, 23, 5, 18, 24, 24, 24, 24, 23, 5, 18, 24, 24, 24, 24, 24, 24, 24, 24, 24, 19, 24, 24, 17, 5, 18, 24, 24, 19, 19, 19, 24, 24, 24, 24, 24, 24, 24, 24, 16, 16, 16, 24, 24, 24, 24, 24, 16, 16, 16, 16, 16, 24, 24, 24, 24, 24, 17, 5, 18, 24, 24, 24, 24, 24, 24, 24, 17, 5,
    5, 20, 16, 24, 24, 16, 16, 16, 16, 21, 5, 18, 21, 4, 7, 24, 6, 2, 18, 17, 6, 1, 18, 24, 24, 24, 23, 6, 3, 18, 24, 24, 24, 24, 24, 24, 24, 24, 23, 5, 18, 24, 17, 5, 18, 24, 17, 1, 1, 7, 18, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 19, 24, 24, 24, 24, 24, 24, 24, 24, 17, 1, 7, 22, 19, 19, 19, 24, 24, 24, 17, 5,
    5, 18, 24, 24, 24, 24, 19, 19, 24, 17, 5, 18, 24, 21, 3, 10, 1, 20, 24, 17, 5, 20, 24, 24, 24, 23, 6, 2, 20, 34, 24, 24, 24, 24, 24, 24, 24, 23, 6, 11, 18, 24, 17, 5, 18, 24, 24, 16, 21, 5, 22, 19, 19, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 17, 5, 22, 24, 24, 24, 24, 24, 24, 24, 24, 21, 1, 4, 2, 1, 7, 18, 24, 24, 17, 5,
    5, 18, 35, 24, 24, 17, 6, 7, 18, 17, 5, 18, 24, 24, 21, 5, 20, 24, 24, 23, 5, 18, 24, 24, 23, 6, 4, 20, 24, 24, 24, 24, 24, 24, 24, 24, 17, 2, 14, 11, 18, 24, 17, 5, 18, 24, 24, 24, 17, 2, 2, 3, 1, 18, 24, 24, 24, 24, 24, 19, 24, 24, 24, 24, 24, 24, 17, 3, 7, 18, 24, 24, 24, 24, 24, 24, 24, 24, 16, 16, 16, 21, 5, 22, 19, 19, 17, 5,
    5, 18, 24, 24, 24, 17, 2, 4, 18, 17, 5, 18, 35, 24, 17, 5, 18, 24, 17, 1, 11, 18, 24, 17, 2, 11, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 21, 12, 1, 18, 24, 17, 5, 18, 24, 24, 24, 24, 16, 16, 16, 16, 24, 24, 24, 24, 24, 17, 5, 22, 19, 19, 24, 24, 24, 24, 21, 5, 18, 24, 24, 24, 24, 24, 24, 19, 19, 24, 24, 24, 17, 12, 1, 4, 7, 24, 5,
    5, 18, 24, 19, 19, 24, 16, 16, 24, 17, 5, 18, 24, 24, 23, 5, 22, 24, 24, 21, 5, 22, 24, 24, 21, 3, 7, 22, 24, 24, 24, 24, 24, 24, 24, 24, 24, 17, 2, 20, 24, 24, 17, 5, 18, 24, 24, 24, 24, 24, 19, 19, 19, 24, 19, 19, 19, 19, 17, 12, 10, 10, 1, 18, 24, 24, 24, 23, 5, 18, 24, 24, 24, 24, 24, 17, 6, 7, 18, 24, 19, 23, 5, 20, 21, 5, 24, 5,
    5, 18, 17, 6, 7, 18, 24, 24, 24, 17, 5, 18, 24, 17, 1, 14, 4, 18, 24, 17, 2, 7, 18, 24, 24, 21, 12, 1, 18, 24, 24, 24, 24, 24, 24, 24, 24, 24, 16, 24, 24, 24, 17, 5, 18, 24, 24, 24, 24, 23, 6, 1, 7, 24, 6, 2, 4, 7, 24, 12, 3, 4, 20, 24, 24, 24, 17, 6, 2, 18, 24, 24, 24, 24, 24, 17, 4, 1, 18, 17, 1, 2, 3, 18, 17, 2, 10, 9,
    5, 18, 17, 3, 4, 18, 24, 24, 24, 17, 5, 18, 24, 24, 21, 1, 20, 24, 24, 24, 24, 5, 18, 24, 24, 17, 12, 24, 24, 24, 24, 24, 24, 24, 24, 19, 24, 24, 24, 24, 24, 24, 17, 5, 18, 24, 24, 24, 23, 6, 2, 0, 2, 3, 1, 0, 0, 5, 24, 5, 20, 16, 24, 24, 24, 24, 17, 5, 24, 19, 19, 24, 24, 24, 24, 24, 16, 16, 24, 24, 16, 16, 16, 24, 24, 21, 5, 0,
    5, 18, 24, 16, 16, 24, 24, 24, 33, 17, 5, 18, 24, 19, 24, 16, 24, 19, 19, 23, 6, 4, 18, 24, 24, 23, 12, 3, 18, 24, 24, 24, 24, 24, 23, 5, 22, 24, 24, 24, 24, 24, 23, 5, 22, 19, 24, 23, 6, 2, 0, 0, 0, 0, 0, 0, 0, 1, 10, 3, 18, 24, 24, 24, 24, 24, 17, 2, 1, 3, 7, 18, 24, 24, 24, 24, 24, 24, 19, 19, 19, 19, 24, 24, 24, 17, 5, 0,
    5, 22, 19, 19, 19, 19, 19, 19, 19, 23, 5, 18, 23, 5, 22, 24, 23, 6, 1, 4, 2, 20, 24, 19, 23, 6, 11, 24, 24, 34, 24, 24, 24, 24, 6, 13, 7, 18, 24, 24, 24, 17, 6, 13, 1, 7, 24, 6, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 20, 24, 19, 19, 19, 24, 24, 24, 16, 16, 21, 5, 18, 24, 24, 24, 24, 24, 17, 6, 1, 1, 1, 7, 18, 24, 17, 5, 0,
    8, 1, 1, 1, 1, 2, 2, 2, 1, 2, 11, 24, 6, 1, 7, 24, 6, 11, 20, 16, 16, 24, 23, 6, 1, 13, 13, 7, 22, 19, 19, 19, 19, 23, 5, 0, 5, 18, 24, 24, 19, 23, 5, 0, 0, 8, 1, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 22, 23, 6, 1, 7, 22, 24, 24, 24, 24, 23, 5, 22, 19, 19, 24, 24, 19, 23, 5, 0, 0, 0, 5, 22, 19, 26, 5, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 1, 9, 0, 8, 1, 14, 11, 25, 19, 19, 23, 6, 9, 0, 0, 0, 8, 1, 1, 1, 1, 1, 1, 9, 0, 5, 22, 19, 23, 6, 1, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 1, 1, 9, 0, 8, 7, 22, 19, 19, 23, 6, 14, 1, 1, 7, 22, 23, 6, 1, 9, 0, 0, 0, 8, 1, 1, 1, 9, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 1, 1, 1, 1, 1, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 1, 2, 1, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 1, 1, 1, 1, 1, 9, 0, 0, 8, 1, 1, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
);

/*
 * Slime Dungeon Level 1 entity array (88x33) each number is a 48x48 pixel space
 * 
 */
var slimeDungeonLevelOneEntities = new Array(
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
);
// Loop to generate each entity
for (var i = 0; i < slimeDungeonLevelOne.length; i++) {
    // Generates the position of each torch within the entity array
    if (slimeDungeonLevelOne[i] >= 1 && slimeDungeonLevelOne[i] <= 4) {
        slimeDungeonLevelOneEntities[i] = 1; // adds a torch to the entities array
    }
    if (slimeDungeonLevelOne[i] == 25) {
        slimeDungeonLevelOneEntities[i] = 2; // adds a silverKey to the entities array
    }
    if (slimeDungeonLevelOne[i] == 26) {
        slimeDungeonLevelOneEntities[i] = 3; // adds a goldKey to the entities array
    }
    if (slimeDungeonLevelOne[i] == 27) {
        slimeDungeonLevelOneEntities[i] = 4; // adds a healingPotion to the entities array
    }
    if (slimeDungeonLevelOne[i] == 28) {
        slimeDungeonLevelOneEntities[i] = 5; // adds a SoulJar to the entities array
    }
    if (slimeDungeonLevelOne[i] == 33) {
        slimeDungeonLevelOneEntities[i] = 10; // adds the playerCharacter to the entities array
    }
    if (slimeDungeonLevelOne[i] == 34) {
        slimeDungeonLevelOneEntities[i] = 11; // adds a SorcererVillain to the entities array
    }
    if (slimeDungeonLevelOne[i] == 35) {
        slimeDungeonLevelOneEntities[i] = 12; // adds a slimeEnemy to the entities array
    }
    if (slimeDungeonLevelOne[i] == 36) {
        slimeDungeonLevelOneEntities[i] = 13; // adds a slimeBehemoth to the entities array
    }
    if (slimeDungeonLevelOne[i] == 37) {
        slimeDungeonLevelOneEntities[i] = 14; // adds a wizard to the entities array
    }
    if (slimeDungeonLevelOne[i] == 38) {
        slimeDungeonLevelOneEntities[i] = 15; // adds a skeleton to the entities array
    }

};
/*----------------------------------------------Dungeon Array for level 1 End-------------------------------------------------------------------------------- */


function damgeStat() {
    this.x = 0;
    this.y = 0;
    this.damged = 0;
    this.exp = 0;
    this.time = new Date().getTime();

}
damgeStat.prototype = new Entity();
damgeStat.prototype.constructor = damgeStat;
damgeStat.prototype.update = function () {
    Entity.prototype.update.call(this);
}
damgeStat.prototype.draw = function () {
    if (this.damged !== 0) {
        ctx.fillStyle = "red";
        ctx.font = "30px Arial";
        ctx.fillText(" - " + this.damged, this.x, this.y);
    }
    if (this.exp !== 0) {
        ctx.fillStyle = "blue";
        ctx.font = "30px Arial";
        ctx.fillText(" + " + this.exp + 'Exp', this.x + 10, this.y + 10);
    }
}
/*----------------------------------------------Character Information-------------------------------------------------------------------------------- */
function CharacterInfo(image, hpImage) {
    this.x = 0;
    this.y = 0;
    this.w = 512;
    this.h = 512;
    this.image = image;
    this.hpImange = hpImage;
};

CharacterInfo.prototype = new Entity();
CharacterInfo.prototype.constructor = CharacterInfo;
CharacterInfo.prototype.update = function () { }
CharacterInfo.prototype.draw = function () {
    var x = character.x - 380;
    var y = character.y - 380;
    //var gradient = this.ctx.createLinearGradient(0, 0, 100, 0);
    //gradient.addColorStop("0", " magenta");
    //gradient.addColorStop("0.5", "blue");
    //gradient.addColorStop("1.0", "white");
    // Fill with gradient
    ctx.drawImage(this.image, x, y, 100, 100);
    ctx.drawImage(this.hpImange, x, y + 200, 40, 40);
    ctx.fillStyle = "#0F0";
    ctx.fillText("Level " + character.level + ' / Soul level ' + character.soul, x + 100, y + 40);
    ctx.fillStyle = "white";
    ctx.fillText("HP " + character.currentHealth + '/' + character.maxHealth, x + 101, y + 59);
    ctx.fillText("H", x + 30, y + 235);
    ctx.fillText(character.inventory['hp'].quantity, x + 5, y + 210);
    ctx.fillStyle = "white";
    ctx.fillText("EXP " + character.currentExp + '/' + character.levelExp, x + 100, y + 75);
    ctx.fillStyle = "white";
    ctx.fillText("Soul " + character.currentSoul + '/' + character.levelSoul, x + 100, y + 90);
    if (character.currentSoul > character.levelSoul) {
        character.currentSoul = character.currentSoul - character.levelSoul;
        character.soul++;
        character.levelSoul *= character.soul;
    }
    if (character.currentExp > character.levelExp) {        
        character.currentExp = character.currentExp - character.levelExp;
        character.level++;
        character.maxHealth += character.maxHealth * character.level / 10;
        character.levelExp *= character.level;
        character.currentHealth = character.maxHealth;
    }
};
/*----------------------------------------------End character information--------------------------------------------------------------------------------- */

/*----------------------------------------------Background for level 1 Start--------------------------------------------------------------------------------- */
var currentScale = 48; // number of pixels
var currentWTiles = 88; // number of tiles width wise on the map
function Background(spritesheet) {
    this.x = 0;
    this.y = 0;
    this.sw = 48;
    this.sh = 48;
    this.dw = currentScale;
    this.dh = currentScale;
    this.spritesheet = spritesheet;
};
Background.prototype = new Entity();
Background.prototype.constructor = Background;
Background.prototype.update = function () { }
Background.prototype.draw = function () {
    var spriteX = 0;
    var spriteY = 0;
    var count = 0;
    var torchCounter = 0;
    var x = this.x;
    var y = this.y;

    // Loop to generate each tile
    for (var i = 0; i < slimeDungeonLevelOne.length; i++) {
        spriteX = (slimeDungeonLevelOne[i] - 1) * 48; // 32 is the number of pixels per sprite
        ctx.drawImage(this.spritesheet, spriteX, spriteY, this.sw, this.sh, x, y, this.dw, this.dh);
        count++;
        if (count >= currentWTiles) // change the value based on how many tiles you will draw. (88 atm)
        {
            x = this.x;
            y += currentScale;
            count = 0;
        }
        else {
            x += currentScale;
        }
    };
};
/*----------------------------------------------Background for level 1 End----------------------------------------------------------------------------------- */


/*----------------------------------------------BSP TREE Start----------------------------------------------------------------------------------------------- */

var Tree = function (leaf) {
    this.leaf = leaf
    this.lchild = undefined
    this.rchild = undefined
}

Tree.prototype.getLeafs = function () {
    if (this.lchild === undefined && this.rchild === undefined)
        return [this.leaf]
    else
        return [].concat(this.lchild.getLeafs(), this.rchild.getLeafs())
}

Tree.prototype.getLevel = function (level, queue) {
    if (queue === undefined)
        queue = []
    if (level == 1) {
        queue.push(this)
    } else {
        if (this.lchild !== undefined)
            this.lchild.getLevel(level - 1, queue)
        if (this.rchild !== undefined)
            this.rchild.getLevel(level - 1, queue)
    }
    return queue
}
var Point = function (x, y) {
    this.x = x;
    this.y = y;
}
var Door = function (x, y, position) {
    this.x = x;
    this.y = y;
    this.position = position;
    this.removed = false;
}
//a container prototype.
var Container = function (x, y, w, h) {
    this.x = x
    this.y = y
    this.w = w
    this.h = h
    this.walls = [];
    this.center = new Point(
        this.x + (this.w / 2),
        this.y + (this.h / 2)
    )
}
Container.prototype.pushWall = function (theX, theY, thePosition, code) {//position #0 is a door
    let point = new Point(theX, theY);
    if (code === 15) { //door
        point = new Door(theX, theY, thePosition);
    }
    if (this.x <= theX + currentScale / 2 && theX + currentScale / 2 < this.x + this.w
        && this.y <= theY + currentScale / 2 && theY + currentScale / 2 < this.y + this.h) {
        this.walls.push(point);
    } else if (this.x <= theX && theX < this.x + this.w
        && this.y <= theY && theY < this.y + this.h) {
        this.walls.push(point);
    } else if (this.x <= theX && theX < this.x + this.w
        && this.y <= theY + currentScale && theY + currentScale < this.y + this.h) {
        this.walls.push(point);
    }
}
Container.prototype.paint = function (c) {
    c.strokeStyle = "#0F0"
    c.lineWidth = 2
    c.strokeRect(this.x * SQUARE, this.y * SQUARE,
        this.w * SQUARE, this.h * SQUARE)
}
// build this tree
function split_container(container, iter) {
    var root = new Tree(container)
    if (iter != 0) {
        var sr = random_split(container)
        root.lchild = split_container(sr[0], iter - 1)
        root.rchild = split_container(sr[1], iter - 1)
    }
    return root
}
function random(min, max) {
    return Math.floor(Math.random() * (max - min + 1) + min)
}
function random_split(container) {
    var r1, r2
    if (random(0, 1) == 0) {
        // Vertical
        r1 = new Container(
            container.x, container.y,             // r1.x, r1.y
            random(1, container.w), container.h   // r1.w, r1.h
        )
        r2 = new Container(
            container.x + r1.w, container.y,      // r2.x, r2.y
            container.w - r1.w, container.h       // r2.w, r2.h
        )

        if (DISCARD_BY_RATIO) {
            var r1_w_ratio = r1.w / r1.h
            var r2_w_ratio = r2.w / r2.h
            if (r1_w_ratio < W_RATIO || r2_w_ratio < W_RATIO) {
                return random_split(container)
            }
        }
    } else {
        // Horizontal
        r1 = new Container(
            container.x, container.y,             // r1.x, r1.y
            container.w, random(1, container.h)   // r1.w, r1.h
        )
        r2 = new Container(
            container.x, container.y + r1.h,      // r2.x, r2.y
            container.w, container.h - r1.h       // r2.w, r2.h
        )

        if (DISCARD_BY_RATIO) {
            var r1_h_ratio = r1.h / r1.w
            var r2_h_ratio = r2.h / r2.w
            if (r1_h_ratio < H_RATIO || r2_h_ratio < H_RATIO) {
                return random_split(container)
            }
        }
    }
    return [r1, r2]
}

const mapWidth = currentWTiles * currentScale + currentScale;
const mapHeight = (slimeDungeonLevelOne.length / currentWTiles) * currentScale;
var MAP_SIZE = currentScale;
var SQUARE = currentWTiles;
var N_ITERATIONS = 6;
var DISCARD_BY_RATIO = true;
var H_RATIO = 0.45;
var W_RATIO = 0.45;
var main_container = new Container(0, 0, mapWidth, mapHeight);
var container_tree = split_container(main_container, N_ITERATIONS);

var leafs = container_tree.getLeafs();


function fillBSPTree(target) {//, background) {

    var x = 0;
    var y = 0;
    var count = 0;
    for (var i = 0; i <= target.length; i++) {
        if (count >= currentWTiles) // change the value based on how many tiles you will draw. (88 atm)
        {
            x = 0;
            y += currentScale;
            count = 0;
        }
        if (15 >= target[i] && target[i] >= 0) { //wall code
            x = count * currentScale;
            //and the wall into property container
            for (var j = 0; j < leafs.length; j++) leafs[j].pushWall(x, y, i, target[i]);//i position, target = code
        }

        count++;
    };
}
fillBSPTree(slimeDungeonLevelOne);
/*----------------------------------------------BSP TREE End------------------------------------------------------------------------------------------------- */

/*----------------------------------------------Collision Start---------------------------------------------------------------------------------------------- */
var Collision = function (entity, killable, width, height) {
    this.Entity = entity;
    this.killable = false;
    this.w = width;
    this.h = height;
};
// if enemies got kill (empty health) override
//entityPosition  is position in array of entities
function isCollise(targetX, targetY, targetW, targetH, entity, entityW, entityH) {
    if (!entity.killable) return false;

    if (entity.x < targetX + targetW &&
        entity.x + entityW > targetX &&
        entity.y < targetY + targetH &&
        entity.y + entityH > targetY) {
        return true;
    }
    return false;
}
//var isColli = false;
function collisionDetect(characterX, characterY, width) {
    var targetX, targetY;
    var j; // area to check collision
    for (j = 0; j < leafs.length; j++) {
        if (leafs[j].x <= characterX && characterX <= leafs[j].x + leafs[j].w
            && leafs[j].y <= characterY && characterY <= leafs[j].y + leafs[j].h) {
            break;
        }
    }
    if (typeof leafs[j] === 'undefined') return true;
    for (var i = 0; i < leafs[j].walls.length; i++) {
        targetX = leafs[j].walls[i].x;
        targetY = leafs[j].walls[i].y;
        targetX = leafs[j].walls[i].x;
        targetY = leafs[j].walls[i].y;
        if (characterX < targetX + currentScale &&// - width for more percise when work with character
            characterX + currentScale - width > targetX &&
            characterY < targetY + currentScale &&
            characterY > targetY) {
            if (leafs[j].walls[i] instanceof Door == true && character.inventory['SilverKey'] > 0) {
                leafs[j].walls[i].removed = true;
                character.inventory['SilverKey'] -= 1;
                slimeDungeonLevelOne[leafs[j].walls[i].position] = 24; // center floor.
                removeDoor(characterX, characterY,width); //remove opened door
                return false;
            }
            return true;
        }
    }
    return false;
}
const removeDoor = (characterX, characterY, width) => {
    var targetX, targetY;
    var j; // area to check collision
    for (j = 0; j < leafs.length; j++) {

        for (var i = 0; i < leafs[j].walls.length; i++) {
            targetX = leafs[j].walls[i].x;
            targetY = leafs[j].walls[i].y;
            targetX = leafs[j].walls[i].x;
            targetY = leafs[j].walls[i].y;
            if (characterX < targetX + currentScale &&// - width for more percise when work with character
                characterX + currentScale - width > targetX &&
                characterY < targetY + currentScale &&
                characterY > targetY) { leafs[j].walls.splice(i, 1); }
        }
    }
}

Container.prototype.pushWall = function (theX, theY, thePosition, code) {//position #0 is a door
    let point = new Point(theX, theY);
    if (code === 15) { //door
        point = new Door(theX, theY, thePosition);
    }
    if (this.x <= theX + currentScale / 2 && theX + currentScale / 2 < this.x + this.w
        && this.y <= theY + currentScale / 2 && theY + currentScale / 2 < this.y + this.h) {
        leafs[i].walls.splice(j, 1); //remove opened door
    } else if (this.x <= theX && theX < this.x + this.w
        && this.y <= theY && theY < this.y + this.h) {
        leafs[i].walls.splice(j, 1); //remove opened door
    } else if (this.x <= theX && theX < this.x + this.w
        && this.y <= theY + currentScale && theY + currentScale < this.y + this.h) {
        leafs[i].walls.splice(j, 1); //remove opened door
    }
}
/*----------------------------------------------Collision End------------------------------------------------------------------------------------------------ */
/*----------------------------------------------Health Start------------------------------------------------------------------------------------------------ */
var bug = 0;
const drawHPBar = () => {
    var entity;
    for (var i = 0; i < gameEngine.entities.length - 1; i++) {
        entity = gameEngine.entities[i];
        ctx.strokeStyle = "red";
        if (entity.maxHealth > 0 && gameEngine.entities[i] instanceof Character != true) {
            ctx.strokeRect(entity.x + 15, entity.y, 50, 3);
            ctx.fillRect(entity.x + 15, entity.y, 50 * entity.currentHealth / entity.maxHealth, 3);
        }
    }
    ctx.strokeStyle = "#b00642";
    ctx.strokeRect(character.x - 279, character.y - 330, 100, 10);
    ctx.fillStyle = "#9a065f";
    ctx.fillRect(character.x - 279, character.y - 329, 100 * character.currentHealth / character.maxHealth, 8);
    ctx.strokeStyle = "#0FF";
    ctx.strokeRect(character.x - 280, character.y - 315, 100, 10);
    ctx.fillStyle = "blue";
    ctx.fillRect(character.x - 280, character.y - 314, 100 * character.currentExp / character.levelExp, 8);
    ctx.strokeStyle = "#0CF";
    ctx.strokeRect(character.x - 280, character.y - 300, 100, 10);
    ctx.fillStyle = "blue";
    ctx.fillRect(character.x - 280, character.y - 299, 100 * character.currentSoul / character.levelSoul, 8);
}

/*----------------------------------------------Health End------------------------------------------------------------------------------------------------ */
/*----------------------------------------------Torch Start-------------------------------------------------------------------------------------------------- */
function Torch(x, y) {
    this.flameAnimation = new Animation(ASSET_MANAGER.getAsset("./img/torchAnimation.png"), 0, 0, 48, 48, 0.1, 4, true, currentScale);
    this.killable = false;
    Entity.call(this, gameEngine, x, y);// where it starts
}

Torch.prototype = new Entity();
Torch.prototype.constructor = Torch;

Torch.prototype.update = function () {
    Entity.prototype.update.call(this);
}
Torch.prototype.draw = function () {
    this.flameAnimation.drawFrame(gameEngine.clockTick, ctx, this.x, this.y);
    Entity.prototype.draw.call(this);
};
/*----------------------------------------------Torch End---------------------------------------------------------------------------------------------------- */

/*----------------------------------------------Silver Key Start--------------------------------------------------------------------------------------------- */
function SilverKey(x, y) {
    this.silverKeyAnimation = new Animation(ASSET_MANAGER.getAsset("./img/SilverKeyAnimation.png"), 0, 0, 48, 48, 0.1, 4, true, currentScale);
    this.killable = true;
    Entity.call(this, gameEngine, x, y);// where it starts
}

SilverKey.prototype = new Entity();
SilverKey.prototype.constructor = SilverKey;

SilverKey.prototype.update = function () {
    Entity.prototype.update.call(this);
}
SilverKey.prototype.draw = function () {
    this.silverKeyAnimation.drawFrame(gameEngine.clockTick, ctx, this.x, this.y);
    Entity.prototype.draw.call(this);
};
/*----------------------------------------------Silver Key End----------------------------------------------------------------------------------------------- */

/*----------------------------------------------Gold Key Start----------------------------------------------------------------------------------------------- */
function GoldKey(x, y) {
    this.goldKeyAnimation = new Animation(ASSET_MANAGER.getAsset("./img/GoldKeyAnimation.png"), 0, 0, 48, 48, 0.1, 4, true, currentScale);
    this.killable = true;
    Entity.call(this, gameEngine, x, y);// where it starts
}

GoldKey.prototype = new Entity();
GoldKey.prototype.constructor = GoldKey;

GoldKey.prototype.update = function () {
    Entity.prototype.update.call(this);
}
GoldKey.prototype.draw = function () {
    this.goldKeyAnimation.drawFrame(gameEngine.clockTick, ctx, this.x, this.y);
    Entity.prototype.draw.call(this);
};
/*----------------------------------------------Gold Key End------------------------------------------------------------------------------------------------- */

/*----------------------------------------------Healing Potion Start----------------------------------------------------------------------------------------- */
function HealingPotion(x, y) {
    this.sparkleAnimation = new Animation(ASSET_MANAGER.getAsset("./img/HealthPotionAnimation.png"), 0, 0, 48, 48, 0.1, 4, true, currentScale);
    this.killable = true;
    this.health = 100;
    this.toX = 0;
    this.toY = 0;
    this.killed = false;
    this.life = 2;
    Entity.call(this, gameEngine, x, y);// where it starts
}

HealingPotion.prototype = new Entity();
HealingPotion.prototype.constructor = HealingPotion;

HealingPotion.prototype.update = function () {
    this.x += this.toX;
    this.y += this.toY;
    if (this.killed) this.life -= gameEngine.clockTick;
    if (this.life <= 0) this.removeFromWorld = true;
    Entity.prototype.update.call(this);
}
HealingPotion.prototype.draw = function () {
    if (this.x >= character.x - 280)
        this.sparkleAnimation.drawFrame(gameEngine.clockTick, ctx, this.x, this.y);
    if (!this.killed) this.sparkleAnimation.drawFrame(gameEngine.clockTick, ctx, this.x, this.y);
    Entity.prototype.draw.call(this);
};
/*----------------------------------------------Healing Potion end------------------------------------------------------------------------------------------- */

/*----------------------------------------------Soul Jar Start----------------------------------------------------------------------------------------------- */
function SoulJar(x, y) {
    this.sparkleAnimation = new Animation(ASSET_MANAGER.getAsset("./img/SoulJarAnimation.png"), 0, 0, 48, 48, 0.1, 4, true, currentScale);
    this.killable = true;
    this.jar = 100;
    this.toX = 0;
    this.toY = 0;
    this.killed = false;
    this.life = 2;
    Entity.call(this, gameEngine, x, y);// where it starts
}

SoulJar.prototype = new Entity();
SoulJar.prototype.constructor = SoulJar;

SoulJar.prototype.update = function () {
    this.x += this.toX;
    this.y += this.toY;
    if (this.killed) this.life -= gameEngine.clockTick;
    if (this.life <= 0) { this.removeFromWorld = true; }
    Entity.prototype.update.call(this);
}
SoulJar.prototype.draw = function () {
    if (this.x >= character.x - 280)
        this.sparkleAnimation.drawFrame(gameEngine.clockTick, ctx, this.x, this.y);
    if (!this.killed) this.sparkleAnimation.drawFrame(gameEngine.clockTick, ctx, this.x, this.y);
    Entity.prototype.draw.call(this);
};

/*----------------------------------------------Soul Jar end------------------------------------------------------------------------------------------------- */

/*----------------------------------------------SlimeBehemoth Start------------------------------------------------------------------------------------------ */
function SlimeBehemoth(startingX, startingY) {
    this.slimeBehemothWalkingLeftAnimation = new Animation(ASSET_MANAGER.getAsset("./img/SlimeBehemothWalkingLeft.png"), 0, 0, 80, 68, 0.1, 8, true, false);
    this.slimeBehemothWalkingRightAnimation = new Animation(ASSET_MANAGER.getAsset("./img/SlimeBehemothWalkingRight.png"), 0, 0, 80, 68, 0.1, 8, true, false);
	this.slimeBehemothAttackLeftAnimation = new Animation(ASSET_MANAGER.getAsset("./img/SlimeBehemothAttackLeft.png"), 0, 0, 117, 68, 0.1, 8, true, false);
    this.slimeBehemothAttackRightAnimation = new Animation(ASSET_MANAGER.getAsset("./img/SlimeBehemothAttackRight.png"), 0, 0, 120, 68, 0.1, 8, true, false);
    this.death = null;
    this.animation = this.slimeBehemothWalkingRightAnimation;
    this.isMovingWest = true;
    this.isMovingEast = false;
    this.moveSpeed = 70;
    this.attackSpeed = 3;
    this.attackInterval = 0.6;
    this.startAttackRange = 80;
    this.stopAttackRange = 300;
    this.startFollowRange = 150;
    this.stopFollowRange = 350;
    this.maxHealth = 500;
    this.currentHealth = 500;
    this.killable = true;
    Entity.call(this, gameEngine, startingX, startingY - 30); // where it starts

}

SlimeBehemoth.prototype = new Entity();
SlimeBehemoth.prototype.constructor = SlimeBehemoth;

SlimeBehemoth.prototype.update = function () {
    
        let xOrigC = (character.x + character.animation.frameWidth / 2);
        let yOrigC = (character.y + character.animation.frameHeight / 2);
        let xOrigS = (this.x + this.animation.frameWidth / 2)
        let yOrigS = (this.y + this.animation.frameHeight / 2)
        let xDiff = xOrigC - xOrigS;
        let yDiff = yOrigC - yOrigS;
        let distance = Math.sqrt(xDiff * xDiff + yDiff * yDiff);

        if (this.x < 230 && this.isMovingWest) {
            this.isMovingEast = true;
            this.isMovingWest = false;
            this.x += gameEngine.clockTick * this.moveSpeed;
        }
        if (this.x > 1210 && this.isMovingEast) {
            this.isMovingEast = false;
            this.isMovingWest = true;
            this.x -= gameEngine.clockTick * this.moveSpeed;
        }
        if (this.isMovingEast) {
            this.x += gameEngine.clockTick * this.moveSpeed;
        }
        if (this.isMovingWest) {
            this.x -= gameEngine.clockTick * this.moveSpeed;
        }
    
    Entity.prototype.update.call(this);
}
SlimeBehemoth.prototype.normalAttack = function (xDiff, yDiff, distance, xOrigS, yOrigS) {
    // to do
}
SlimeBehemoth.prototype.draw = function () {
    if (this.isMovingWest) {
        this.animation = this.slimeBehemothWalkingLeftAnimation;
    } else {
        this.animation = this.slimeBehemothWalkingRightAnimation;
    }
    this.animation.drawFrame(gameEngine.clockTick, ctx, this.x, this.y);
    Entity.prototype.draw.call(this);
}
/*----------------------------------------------SlimeBehemoth End-------------------------------------------------------------------------------------------- */

/*----------------------------------------------SlimeEnemy Start--------------------------------------------------------------------------------------------- */
function SlimeEnemy(startingX, startingY) {
    this.slimeEnemyWalkingLeftAnimation = new Animation(ASSET_MANAGER.getAsset("./img/SlimeWalkLeft.png"), 0, 0, 80, 80, 0.1, 8, true, false);
    this.slimeEnemyWalkingRightAnimation = new Animation(ASSET_MANAGER.getAsset("./img/SlimeWalkRight.png"), 0, 0, 80, 80, 0.1, 8, true, false);
	this.slimeEnemyAttackLeftAnimation = new Animation(ASSET_MANAGER.getAsset("./img/SlimeAttackLeft.png"), 0, 0, 80, 80, 0.1, 10, true, false);
    this.slimeEnemyAttackRightAnimation = new Animation(ASSET_MANAGER.getAsset("./img/SlimeAttackRight.png"), 0, 0, 80, 80, 0.1, 10, true, false);
	this.slimeEnemyIdleAnimation = new Animation(ASSET_MANAGER.getAsset("./img/SlimeIdle.png"), 0, 0, 80, 80, 0.1, 8, true, false);
    this.death = new Animation(ASSET_MANAGER.getAsset("./img/SlimeDeath.png"), 0, 0, 80, 80, 0.1, 8, true, false);
    this.animation = this.slimeEnemyIdleAnimation;
    this.isMovingWest = false;
    this.isMovingEast = false;
    this.moveSpeed = 40;
	this.fleeSpeed = 10;
    this.cooldown = 0;
    this.special = 4;
    this.dangerRange = 1;
    this.fleeRange = 1;
    this.attackSpeed = 3;
    this.attackInterval = 2;
    this.startAttackRange = 80;
    this.stopAttackRange = 300;
    this.startFollowRange = 150;
    this.stopFollowRange = 350;
    this.maxHealth = 300;
    this.currentHealth = 300;
    this.hasDied = false;
    this.life = 1;
    this.killable = true;


    Entity.call(this, gameEngine, startingX - 50, startingY - 15); // where it starts

}

SlimeEnemy.prototype = new Entity();
SlimeEnemy.prototype.constructor = SlimeEnemy;

SlimeEnemy.prototype.update = function () {
    if (this.cooldown > 0) this.cooldown -= gameEngine.clockTick;
    if (this.special > 0) this.cooldown -= gameEngine.clockTick;
    let canMove = false;
    let xOrigC = (character.x + character.animation.frameWidth / 2);
    let yOrigC = (character.y + character.animation.frameHeight / 2);
    let xOrigS = (this.x + this.animation.frameWidth / 2)
    let yOrigS = (this.y + this.animation.frameHeight / 2)
    let xDiff = xOrigC - xOrigS;
    let yDiff = yOrigC - yOrigS;
    let distance = Math.sqrt(xDiff * xDiff + yDiff * yDiff);
    let origX = this.x;
    let origY = this.y;


    if (distance < this.fleeRange) {
        let velX = (this.fleeSpeed * xDiff) / distance;
        let velY = (this.fleeSpeed * yDiff) / distance;

        this.x -= gameEngine.clockTick * velX;
        this.y -= gameEngine.clockTick * velY;

        if (distance < this.dangerRange) this.specialAttack(xDiff, yDiff, distance, xOrigS, yOrigS);
    } else if (this.startAttackRange <= distance && distance <= this.stopAttackRange) {
        this.attack(xDiff, yDiff, distance, xOrigS, yOrigS);
    }

    if (this.startFollowRange <= distance && distance <= this.stopFollowRange) {
        let velX = (this.moveSpeed * xDiff) / distance;
        let velY = (this.moveSpeed * yDiff) / distance;

        this.x += gameEngine.clockTick * velX;
        this.y += gameEngine.clockTick * velY;

    }
    if (!collisionDetect(this.x + 20, 55 + this.y, 20)) { canMove = true }
    if (!canMove) {
        this.x = origX;
        this.y = origY;
    }
    Entity.prototype.update.call(this);
}
SlimeEnemy.prototype.attack = function (xDiff, yDiff, distance, xOrigS, yOrigS) {
    if (this.special <= 0) {
        this.specialAttack(xDiff, yDiff, distance, xOrigS, yOrigS);
    } else if (this.cooldown <= 0) {
        this.normalAttack(xDiff, yDiff, distance, xOrigS, yOrigS);
    }
}

SlimeEnemy.prototype.normalAttack = function (xDiff, yDiff, distance, xOrigS, yOrigS) {
    let velX = (this.attackSpeed * xDiff) / distance;
    let velY = (this.attackSpeed * yDiff) / distance;

    let projectile = new Projectile(gameEngine,
        xOrigS,
        yOrigS,
        velX,
        velY);
    gameEngine.addEntity(projectile);
    this.cooldown = this.attackInterval;
}
SlimeEnemy.prototype.specialAttack = function (xDiff, yDiff, distance, xOrigS, yOrigS) {
    // TODO
}
SlimeEnemy.prototype.draw = function () {
    if (this.animation !== this.death) {
        if (this.isMovingWest) {
            this.animation = this.slimeEnemyWalkingLeftAnimation;
        } else if (this.isMovingEast) {
            this.animation = this.slimeEnemyWalkingRightAnimation;
        } else if (this.isAttackingLeft) {
            this.animation = this.slimeEnemyAttackLeftAnimation;
        } else if (this.isAttackingRight) {
            this.animation = this.slimeEnemyAttackRightAnimation;
        } else if (this.currentHealth == 0 && !this.hasDied) {
            this.animation = this.slimeEnemyDeathAnimation;
            this.hasDied = true;
        } else {
            this.animation = this.slimeEnemyIdleAnimation;
        }
    }
    this.animation.drawFrame(gameEngine.clockTick, ctx, this.x, this.y);
    if (this.animation === this.death) {
        this.life -= gameEngine.clockTick;
        if (this.life <= 0) this.removeFromWorld = true;
    }
    Entity.prototype.draw.call(this);
}
/*----------------------------------------------SlimeEnemy End---------------------------------------------------------------------------------------------- */

/*----------------------------------------------Skeleton Start---------------------------------------------------------------------------------------------- */
function Skeleton(game, startingX, startingY) {
    this.ctx = game.ctx;
    this.skeletonWalkingLeftAnimation = new Animation(ASSET_MANAGER.getAsset("./img/SkeletonWalkLeft.png"), 0, 0, 44, 66, 0.1, 13, true, false);
    this.skeletonWalkingRightAnimation = new Animation(ASSET_MANAGER.getAsset("./img/SkeletonWalkRight.png"), 0, 0, 44, 66, 0.1, 13, true, false);
    this.death = null;
    this.animation = this.skeletonWalkingRightAnimation;
    this.isMovingWest = true;
    this.isMovingEast = false;
    this.moveSpeed = 30;
    this.attackSpeed = 3;
    this.attackInterval = 0.6;
    this.startAttackRange = 80;
    this.stopAttackRange = 300;
    this.startFollowRange = 150;
    this.stopFollowRange = 350;
    this.maxHealth = 1000;
    this.currentHealth = 1000;
    this.killable = true;
    Entity.call(this, game, startingX - 50, startingY - 25); // where it starts

}

Skeleton.prototype = new Entity();
Skeleton.prototype.constructor = Skeleton;

Skeleton.prototype.update = function () {
    let xOrigC = (character.x + character.animation.frameWidth / 2);
    let yOrigC = (character.y + character.animation.frameHeight / 2);
    let xOrigS = (this.x + this.animation.frameWidth / 2)
    let yOrigS = (this.y + this.animation.frameHeight / 2)
    let xDiff = xOrigC - xOrigS;
    let yDiff = yOrigC - yOrigS;
    let distance = Math.sqrt(xDiff * xDiff + yDiff * yDiff);

    if (this.x < 2550 && this.isMovingWest) {
        this.isMovingEast = true;
        this.isMovingWest = false;
        this.x += gameEngine.clockTick * this.moveSpeed;
    }
    if (this.x > 3380 && this.isMovingEast) {
        this.isMovingEast = false;
        this.isMovingWest = true;
        this.x -= gameEngine.clockTick * this.moveSpeed;
    }
    if (this.isMovingEast) {
        this.x += gameEngine.clockTick * this.moveSpeed;
    }
    if (this.isMovingWest) {
        this.x -= gameEngine.clockTick * this.moveSpeed;
    }
    Entity.prototype.update.call(this);
}
Skeleton.prototype.normalAttack = function (xDiff, yDiff, distance, xOrigS, yOrigS) {
    // to do
}
Skeleton.prototype.draw = function () {
    if (this.isMovingWest) {
        this.animation = this.skeletonWalkingLeftAnimation;
    } else {
        this.animation = this.skeletonWalkingRightAnimation;
    }
    this.animation.drawFrame(this.game.clockTick, this.ctx, this.x, this.y);
    Entity.prototype.draw.call(this);
}
/*----------------------------------------------Skeleton End------------------------------------------------------------------------------------------------- */

/*----------------------------------------------Wizard Start------------------------------------------------------------------------------------------------ */
function Wizard(game, startingX, startingY) {
    this.ctx = game.ctx;
    this.wizardWalkingLeftAnimation = new Animation(ASSET_MANAGER.getAsset("./img/wizardWalkLeft.png"), 0, 0, 80, 80, 0.1, 6, true, false);
    this.wizardWalkingRightAnimation = new Animation(ASSET_MANAGER.getAsset("./img/wizardWalkRight.png"), 0, 0, 80, 80, 0.1, 6, true, false);
	this.wizardAttackLeftAnimation = new Animation(ASSET_MANAGER.getAsset("./img/wizardAttackLeft.png"), 0, 0, 80, 80, 0.1, 6, true, false);
    this.wizardAttackRightAnimation = new Animation(ASSET_MANAGER.getAsset("./img/wizardAttackRight.png"), 0, 0, 80, 80, 0.1, 6, true, false);
	this.wizardIdleAnimation = new Animation(ASSET_MANAGER.getAsset("./img/wizardIdle.png"), 0, 0, 80, 80, 0.1, 10, true, false);
    this.death = new Animation(ASSET_MANAGER.getAsset("./img/wizardDeath.png"), 0, 0, 80, 80, 0.1, 10, true, false);
    this.animation = this.wizardWalkingLeftAnimation;
    this.isMovingWest = false;
    this.isMovingEast = true;
    this.moveSpeed = 140;
    this.attackSpeed = 3;
    this.attackInterval = 0.6;
    this.startAttackRange = 80;
    this.stopAttackRange = 300;
    this.startFollowRange = 150;
    this.stopFollowRange = 350;
    this.maxHealth = 400;
    this.currentHealth = 400;
    this.killable = true;
    this.life = 1;
    Entity.call(this, game, startingX - 50, startingY - 25); // where it starts

}

Wizard.prototype = new Entity();
Wizard.prototype.constructor = Wizard;

Wizard.prototype.update = function () {
    let xOrigC = (character.x + character.animation.frameWidth / 2);
    let yOrigC = (character.y + character.animation.frameHeight / 2);
    let xOrigS = (this.x + this.animation.frameWidth / 2)
    let yOrigS = (this.y + this.animation.frameHeight / 2)
    let xDiff = xOrigC - xOrigS;
    let yDiff = yOrigC - yOrigS;
    let distance = Math.sqrt(xDiff * xDiff + yDiff * yDiff);

    if (this.x < 1050 && this.isMovingWest) {
        this.isMovingEast = true;
        this.isMovingWest = false;
        this.x += gameEngine.clockTick * this.moveSpeed;
    }
    if (this.x > 1970 && this.isMovingEast) {
        this.isMovingEast = false;
        this.isMovingWest = true;
        this.x -= gameEngine.clockTick * this.moveSpeed;
    }
    if (this.isMovingEast) {
        this.x += gameEngine.clockTick * this.moveSpeed;
    }
    if (this.isMovingWest) {
        this.x -= gameEngine.clockTick * this.moveSpeed;
    }
    Entity.prototype.update.call(this);
}
Wizard.prototype.normalAttack = function (xDiff, yDiff, distance, xOrigS, yOrigS) {
    // to do
}
Wizard.prototype.draw = function () {
    if (this.animation !== this.death) {
        if (this.isMovingWest) {
            this.animation = this.wizardWalkingLeftAnimation;
        } else {
            this.animation = this.wizardWalkingRightAnimation;
        }
    }
    this.animation.drawFrame(this.game.clockTick, this.ctx, this.x, this.y);
    if (this.animation === this.death) {
        this.life -= gameEngine.clockTick;
        if (this.life <= 0) this.removeFromWorld = true;
    }
    Entity.prototype.draw.call(this);
}
/*----------------------------------------------Wizard End--------------------------------------------------------------------------------------------------- */

/*----------------------------------------------SorcererVillain Start---------------------------------------------------------------------------------------- */
function SorcererVillain(game, x, y) {
    this.ctx = game.ctx;
    this.standingAttackAnimation = new Animation(ASSET_MANAGER.getAsset("./img/sorcererVillain.png"), 0, 0, 100, 100, 0.1, 10, true, false);
    this.death = null;
    this.animation = this.standingAttackAnimation;
    this.moveSpeed = 70;
    this.fleeSpeed = 90;
    this.attackSpeed = 3;
    this.attackInterval = 0.6;
    this.cooldown = 0;
    this.special = 4;
    this.dangerRange = 50;
    this.fleeRange = 100;
    this.startAttackRange = 80;
    this.stopAttackRange = 300;
    this.startFollowRange = 150;
    this.stopFollowRange = 350;
    this.maxHealth = 1000;
    this.currentHealth = 1000;
    this.killable = true;
    Entity.call(this, game, x, y); // where it starts 350, 100

}

SorcererVillain.prototype = new Entity();
SorcererVillain.prototype.constructor = SorcererVillain;

SorcererVillain.prototype.update = function () {
    if (this.cooldown > 0) this.cooldown -= gameEngine.clockTick;
    if (this.special > 0) this.cooldown -= gameEngine.clockTick;
    let canMove = false;
    let xOrigC = (character.x + character.animation.frameWidth / 2);
    let yOrigC = (character.y + character.animation.frameHeight / 2);
    let xOrigS = (this.x + this.animation.frameWidth / 2)
    let yOrigS = (this.y + this.animation.frameHeight / 2)
    let xDiff = xOrigC - xOrigS;
    let yDiff = yOrigC - yOrigS;
    let distance = Math.sqrt(xDiff * xDiff + yDiff * yDiff);
    let origX = this.x;
    let origY = this.y;


    if (distance < this.fleeRange) {
        let velX = (this.fleeSpeed * xDiff) / distance;
        let velY = (this.fleeSpeed * yDiff) / distance;

        this.x -= gameEngine.clockTick * velX;
        this.y -= gameEngine.clockTick * velY;

        if (distance < this.dangerRange) this.specialAttack(xDiff, yDiff, distance, xOrigS, yOrigS);
    } else if (this.startAttackRange <= distance && distance <= this.stopAttackRange) {
        this.attack(xDiff, yDiff, distance, xOrigS, yOrigS);
    }

    if (this.startFollowRange <= distance && distance <= this.stopFollowRange) {
        let velX = (this.moveSpeed * xDiff) / distance;
        let velY = (this.moveSpeed * yDiff) / distance;

        this.x += gameEngine.clockTick * velX;
        this.y += gameEngine.clockTick * velY;

    }
    if (!collisionDetect(this.x + 30, 90 + this.y, 20)) { canMove = true }
    if (!canMove) {
        this.x = origX;
        this.y = origY;
    }
    Entity.prototype.update.call(this);
}

SorcererVillain.prototype.attack = function (xDiff, yDiff, distance, xOrigS, yOrigS) {
    if (this.special <= 0) {
        this.specialAttack(xDiff, yDiff, distance, xOrigS, yOrigS);
    } else if (this.cooldown <= 0) {
        this.normalAttack(xDiff, yDiff, distance, xOrigS, yOrigS);
    }
}

SorcererVillain.prototype.normalAttack = function (xDiff, yDiff, distance, xOrigS, yOrigS) {
    let velX = (this.attackSpeed * xDiff) / distance;
    let velY = (this.attackSpeed * yDiff) / distance;

    let projectile = new Projectile(gameEngine,
        xOrigS,
        yOrigS,
        velX,
        velY);
    gameEngine.addEntity(projectile);
    this.cooldown = this.attackInterval;
}

SorcererVillain.prototype.specialAttack = function (xDiff, yDiff, distance, xOrigS, yOrigS) {
    // TODO
}

SorcererVillain.prototype.draw = function () {
    this.animation.drawFrame(this.game.clockTick, this.ctx, this.x, this.y);
    if (this.game.debug) {
        ctx.strokeStyle = "green";
        ctx.strokeRect(this.x, this.y, 100, 100);
        ctx.strokeStyle = "yellow";
        ctx.strokeRect(this.x + 30, this.y + 30, 30, 100);
    }
    Entity.prototype.draw.call(this);
}
/*----------------------------------------------SorcererVillain End------------------------------------------------------------------------------------------ */

/*----------------------------------------------Projectile Start--------------------------------------------------------------------------------------------- */
function Projectile(game, x, y, xs, ys) {
    this.xs = xs;
    this.ys = ys;
    this.scale = 4;
    this.life = 10;
    this.killable = true;
    Entity.call(this, game, x, y);
}

Projectile.prototype = new Entity();
Projectile.prototype.constructor = Projectile;

Projectile.prototype.update = function () {
    this.x += this.xs;
    this.y += this.ys;
    this.life -= gameEngine.clockTick;
    if (this.life <= 0) this.removeFromWorld = true;
}

Projectile.prototype.draw = function () {
    ctx.save();
    ctx.beginPath();
    ctx.arc(this.x, this.y, this.scale, 0, 2 * Math.PI);
    ctx.fillStyle = `rgb(253,208,157)`;
    ctx.fill();
    ctx.restore();
}
/*----------------------------------------------Projectile End----------------------------------------------------------------------------------------------- */

/*----------------------------------------------Slime Projectile Start--------------------------------------------------------------------------------------------- */
function SlimeProjectile(game, x, y, xs, ys) {
    this.xs = xs;
    this.ys = ys;
    this.scale = 4;
    this.life = 10;
    this.killable = true;
    Entity.call(this, game, x, y);
}

SlimeProjectile.prototype = new Entity();
SlimeProjectile.prototype.constructor = SlimeProjectile;

SlimeProjectile.prototype.update = function () {
    this.x += this.xs;
    this.y += this.ys;
    this.life -= gameEngine.clockTick;
    if (this.life <= 0) this.removeFromWorld = true;
}

SlimeProjectile.prototype.draw = function () {
    ctx.save();
    ctx.beginPath();
    ctx.arc(this.x, this.y, this.scale, 0, 2 * Math.PI);
    ctx.fillStyle = `rgb(35,255,50)`;
    ctx.fill();
    ctx.restore();
}
/*----------------------------------------------Slime Projectile End----------------------------------------------------------------------------------------------- */

/*----------------------------------------------Character Start---------------------------------------------------------------------------------------------- */
// The entity's viewport is determined by its BoundingBox object.
let inventory = {
    hp: { value: 100, quantity: 1 },
    SilverKey: 1,
    GoldKey: 0
};
function Character() {                                                                                            //loop  reversed
    this.standAnimation = new Animation(ASSET_MANAGER.getAsset("./img/characterIdleAnimation.png"), 0, 0, 42, 42, 0.08, 4, true, false);
    this.walkRightAnimation = new Animation(ASSET_MANAGER.getAsset("./img/characterRightAnimation.png"), 0, 0, 42, 42, 0.15, 6, true, false);
    this.walkUpLeftAnimation = new Animation(ASSET_MANAGER.getAsset("./img/spritesheet.png"), 32, 32, 33, 32, 1.04, 1, true, false);
    this.walkLeftAnimation = new Animation(ASSET_MANAGER.getAsset("./img/characterLeftAnimation.png"), 0, 0, 42, 42, 0.15, 6, true, false);
    this.walkUpRightAnimation = new Animation(ASSET_MANAGER.getAsset("./img/spritesheet.png"), 32, 64, 33, 32, 1.04, 1, true, false);
    this.walkUpAnimation = new Animation(ASSET_MANAGER.getAsset("./img/characterBackwardRun.png"), 0, 0, 42, 42, 0.15, 5, true, false);
    this.walkDownLeftAnimation = new Animation(ASSET_MANAGER.getAsset("./img/spritesheet.png"), 32, 96, 32, 32, 1.04, 1, true, false);
    this.walkDownAnimation = new Animation(ASSET_MANAGER.getAsset("./img/CharacterForwardRun.png"), 0, 0, 42, 42, 0.15, 5, true, false);
    this.walkDownRightAnimation = new Animation(ASSET_MANAGER.getAsset("./img/spritesheet.png"), 32, 128, 32, 32, 1.04, 1, true, false);
    this.attackUpAnimation = new Animation(ASSET_MANAGER.getAsset("./img/characterUpAttack.png"), 0, 0, 42, 42, 0.04, 3, false, false);
    this.attackDownAnimation = new Animation(ASSET_MANAGER.getAsset("./img/characterDownAttack.png"), 0, 0, 42, 42, 0.04, 3, false, false);
    this.attackLeftAnimation = new Animation(ASSET_MANAGER.getAsset("./img/characterLeftAttack.png"), 0, 0, 42, 42, 0.04, 3, false, false);
    this.attackRightAnimation = new Animation(ASSET_MANAGER.getAsset("./img/characterRightAttack.png"), 0, 0, 42, 42, 0.04, 3, false, false);
    this.whirlwindAttackAnimation = new Animation(ASSET_MANAGER.getAsset("./img/characterWhirlWindAttackAnimation.png"), 0, 0, 42, 42, 0.04, 4, false, false);
    this.animation = this.standAnimation; // initial animation.
    this.isAttacking = false;
    this.isWhirlwinding = false;
    this.isMovingLeft = false;
    this.isMovingRight = false;
    this.isMovingUp = false;
    this.isMovingDown = false;
    this.isMovingUpLeft = false;
    this.isMovingUpRight = false;
    this.isMovingDownLeft = false;
    this.isMovingDownRight = false;
    this.radius = 100;
    this.inventory = inventory;
    this.level = 1;
    this.soul = 1;
    this.travelSpeed = 2;
    this.killable = true;
    this.maxHealth = 1000 + 1000 * (this.level - 1) * 0.2;
    this.currentHealth = 1000;
    this.currentSoul = 0;
    this.levelSoul = this.soul * 150;
    this.baseDamge = 10;
    this.currentExp = 0;
    this.levelExp = this.level * 100;
    this.scale = 1; // set to 1 if the sprite dimensions are the exact size that should be rendered.
    this.boundingBox = new BoundingBox(0, 0, 20, 40, 10);
    //console.log(this); // Debugging.
    Entity.call(this, gameEngine, 385, 450, false); // Spawn the entity's upper left corner at these coordinates of the world.
}

Character.prototype = new Entity();

Character.prototype.updateViewport = function () {
    let sx = this.game.viewport.sx;
    let sy = this.game.viewport.sy;
    // Calculates the position with the given scale.
    this.game.viewport.x = (this.x + this.boundingBox.width) * sx - this.game.ctx.canvas.width / 2;
    this.game.viewport.y = (this.y + this.boundingBox.height / 2) * sy - this.game.ctx.canvas.height / 2;
}

Character.prototype.update = function () {
    this.isMovingUp = false;
    this.isMovingLeft = false;
    this.isMovingDown = false;
    this.isMovingRight = false;
    this.isMovingUpLeft = false;
    this.isMovingUpRight = false;
    this.isMovingDownLeft = false;
    this.isMovingDownRight = false;
    if (this.game.one) { this.isWhirlwinding = true; }
    if (this.game.click) { this.isAttacking = true; }
    if (this.game.up && this.game.left) this.isMovingUpLeft = true;
    if (this.game.up && this.game.right) this.isMovingUpRight = true;
    if (this.game.down && this.game.left) this.isMovingDownLeft = true;
    if (this.game.down && this.game.right) this.isMovingDownRight = true;
    if (this.game.left && !collisionDetect(this.x + 8 - this.travelSpeed, currentScale - 5 + this.y, 25)) { this.isMovingLeft = true }// 
    if (this.game.right && !collisionDetect(this.x + 8 + this.travelSpeed, currentScale - 5 + this.y, 25)) { this.isMovingRight = true }
    if (this.game.up && !collisionDetect(this.x + 8, 25 + this.y - this.travelSpeed, 25)) {
        this.isMovingUp = true;
    }
    if (this.game.down && !collisionDetect(this.x + 8, currentScale + this.y, 25)) {
        this.isMovingDown = true;
    }
    if (this.game.debug && (this.isMovingLeft || this.isMovingRight || this.isMovingUp || this.isMovingDown)) {
        // console.log(this);
    }
    if (this.isMovingUp) {
        this.y -= this.travelSpeed; // Moves the entity.
    } else if (this.isMovingDown) {
        this.y += this.travelSpeed; // Moves the entity.
    }
    if (this.isMovingLeft) {
        var speed = this.travelSpeed;
        this.x -= this.travelSpeed; // Moves the entity.
    } else if (this.isMovingRight) {
        var speed = this.travelSpeed;
        this.x += this.travelSpeed; // Moves the entity.
    }
    // The boundingBox follows the entity.
    this.boundingBox.x = this.x;
    this.boundingBox.y = this.y;

    this.updateViewport();

    if (this.isAttacking) {
        if (this.attackRightAnimation.isDone()) {
            this.attackRightAnimation.elapsedTime = 0
            this.isAttacking = false;
        }
        if (this.attackLeftAnimation.isDone()) {
            this.attackLeftAnimation.elapsedTime = 0
            this.isAttacking = false;
        }
        if (this.attackUpAnimation.isDone()) {
            this.attackUpAnimation.elapsedTime = 0
            this.isAttacking = false;
        }
        if (this.attackDownAnimation.isDone()) {
            this.attackDownAnimation.elapsedTime = 0
            this.isAttacking = false;
        }
    }
    if (this.isWhirlwinding) {
        if (this.whirlwindAttackAnimation.isDone()) {
            this.whirlwindAttackAnimation.elapsedTime = 0
            this.isWhirlwinding = false;
        }
    }
    if (this.game.used === 'hp' && this.inventory['hp'].quantity > 0) {
        this.currentHealth = Math.min(this.currentHealth + this.inventory['hp'].value, this.maxHealth);
        this.inventory['hp'].quantity -= 1;
        this.game.used = null;
    }
    Entity.prototype.update.call(this);
}

Character.prototype.draw = function (ctx) {
    if (this.isAttacking) {
        if (this.isAttacking && this.isMovingUp) {
            this.animation = this.attackUpAnimation;
        } else if (this.isAttacking && this.isMovingLeft) {
            this.animation = this.attackLeftAnimation;
        } else if (this.isAttacking && this.isMovingRight) {
            this.animation = this.attackRightAnimation;
        } else {
            this.animation = this.attackDownAnimation;
        }
    } else if (this.isWhirlwinding) {
        this.animation = this.whirlwindAttackAnimation;
    } else if (this.isMovingUpLeft) {
        this.animation = this.walkLeftAnimation;
    } else if (this.isMovingUpRight) {
        this.animation = this.walkRightAnimation;
    } else if (this.isMovingDownLeft) {
        this.animation = this.walkLeftAnimation;
    } else if (this.isMovingDownRight) {
        this.animation = this.walkRightAnimation;
    } else if (this.isMovingUp) {
        this.animation = this.walkUpAnimation;
    } else if (this.isMovingDown) {
        this.animation = this.walkDownAnimation;
    } else if (this.isMovingLeft) {
        this.animation = this.walkLeftAnimation;
    } else if (this.isMovingRight) {
        this.animation = this.walkRightAnimation;
    } else {
        this.animation = this.standAnimation;
    }
    this.animation.drawFrame(this.game.clockTick, ctx, this.x, this.y);
    if (this.game.debug) {
        ctx.strokeStyle = "green";
        ctx.strokeRect(this.boundingBox.x, this.boundingBox.y, this.boundingBox.width, this.boundingBox.height);
        //ctx.strokeStyle = "orange";
        //ctx.strokeRect(this.x, this.y, this.animation.frameWidth*this.scale, this.animation.frameHeight*this.scale); //
        //console.log('BoundingBox: ' + this.boundingBox.x + ',' + this.boundingBox.y); // Debugging.
        for (var i = 0; i < leafs.length; i++) {
            ctx.strokeStyle = "red";
            ctx.strokeRect(leafs[i].x, leafs[i].y, leafs[i].w, leafs[i].h);
            ctx.strokeStyle = "green";
            for (var j = 0; j < leafs[i].walls.length; j++)
                ctx.strokeRect(leafs[i].walls[j].x, leafs[i].walls[j].y, 48, 48);
        }
    }
    Entity.prototype.draw.call(this);
    let scaleOf = 4;
    let range = (this.isWhirlwinding) ? currentScale * 1.5 : (this.isAttacking) ? currentScale / 2 : 0;
    let newX = this.x;
    let newY = this.y;
    switch (this.animation) {
        case this.attackLeftAnimation:
            newX -= currentScale / 2;
            break;
        case this.attackRightAnimation:
            newX += currentScale / 10;
            break;
        case this.attackDownAnimation:
            newY -= currentScale / 5;
            break;
        case this.attackUpAnimation:
            newY += currentScale / 5;
            break;
        case this.whirlwindAttackAnimation:
            newX -= currentScale;
            newY -= currentScale;
        default: break;
    }//SorcererVillain
    if (new Date().getTime() - damgeST.time > 500) { damgeST.damged = 0; damgeST.exp = 0; } //hide
    for (let i = 0; i < gameEngine.entities.length; i++) {//
        if (gameEngine.entities[i] instanceof Character == true || typeof gameEngine.entities[i] === 'undefined') continue;
        scaleOf = (gameEngine.entities[i] instanceof Projectile) ? 4 : currentScale - 10;
        if (isCollise(newX + 20, newY - scaleOf + 20, 5 + range, 42 + range, gameEngine.entities[i], scaleOf + range, scaleOf + range)) {
            if (gameEngine.entities[i] instanceof Projectile) {
                gameEngine.entities.splice(i, 1); this.currentHealth -= 5; break;
            }
            if (gameEngine.entities[i] instanceof SilverKey) { this.inventory['SilverKey'] += 1; gameEngine.entities.splice(i, 1); break; }
            if (gameEngine.entities[i] instanceof GoldKey) { this.inventory['GoldKey'] += 1; gameEngine.entities.splice(i, 1); break; }
            if (gameEngine.entities[i] instanceof HealingPotion) { this.inventory['hp'].quantity += 1; gameEngine.entities.splice(i, 1); break; }
            if (gameEngine.entities[i] instanceof SoulJar) {
                let jar = (gameEngine.entities[i] instanceof SoulJar) ? gameEngine.entities[i].jar : 0;
                this.currentSoul += jar;
                if (jar > 0 || heal > 0) {
                    gameEngine.entities[i].killed = true;
                    let xOrigC = (character.x + character.animation.frameWidth / 2 - 380 + 100);
                    let yOrigC = (character.y + character.animation.frameHeight / 2 - 380 + 60);
                    let xOrigS = (gameEngine.entities[i].x)
                    let yOrigS = (gameEngine.entities[i].y)
                    let xDiff = xOrigC - xOrigS;
                    let yDiff = yOrigC - yOrigS;
                    let distance = Math.sqrt(xDiff * xDiff + yDiff * yDiff);
                    gameEngine.entities[i].toX = (10 * xDiff) / distance;
                    gameEngine.entities[i].toY = (10 * yDiff) / distance;
                    gameEngine.entities[i].x += (50 * xDiff) / distance;
                    gameEngine.entities[i].y += (50 * yDiff) / distance;
                    break;
                }
            }
            let damge = 0;
            if (this.game.click || this.game.isWhirlwinding || this.game.isAttacking) {
                this.game.click = false;
                damge = this.baseDamge * (1 + (this.level - 1) * 0.1 + this.soul);
                gameEngine.entities[i].currentHealth -= damge;
                damgeST.x = gameEngine.entities[i].x;
                damgeST.y = gameEngine.entities[i].y;
                damgeST.damged = damge;
                damgeST.time = new Date().getTime();
                bug = 0;
            }
            this.currentHealth -= 10; //console.log('cross by enemy');
            if (gameEngine.entities[i].currentHealth <= 0 || gameEngine.entities[i].currentHealth == null) {
                if (gameEngine.entities[i].death === null)
                    gameEngine.entities.splice(i, 1);
                else {
                    gameEngine.entities[i].animation = gameEngine.entities[i].death;
                    gameEngine.entities[i].killable = false;
                }
                this.currentExp += (this.level + 1) * 20; // may change the formular later 
                damgeST.exp = (this.level + 1) * 20;
            }
            if (bug <= 8) { this.currentHealth += 10; bug++; }
        }

        else if (gameEngine.entities[i] instanceof Projectile == true && collisionDetect(gameEngine.entities[i].x, gameEngine.entities[i].y, currentScale)) {
            gameEngine.entities.splice(i, 1);
        }
    }
    if (this.currentHealth <= 0) {//check here if got bug
        gameEngine.entities.splice(gameEngine.entities.length - 1, 1);
        let text = document.getElementById('gameover');
        text.style.display = 'inline';
        let tPos = text.getBoundingClientRect();
        let cPos = gameEngine.ctx.canvas.getBoundingClientRect();
        let x = cPos.left + (cPos.width - tPos.width) / 2
        let y = cPos.top + (cPos.height - tPos.height) / 2
        //console.log(tPos);
        text.style.position = 'absolute';
        text.style.left = x + 'px';
        text.style.top = y + 'px';
    }
    drawHPBar();
}
/*----------------------------------------------Character End---------------------------------------------------------------------------------------------- */

/*----------------------------------------------Debug Stuff Start------------------------------------------------------------------------------------------ */
function CenterThingy() {
    // Displays the center of the canvas/camera.
    Entity.call(this, gameEngine, 390, 390);
    this.radius = 200;
}
CenterThingy.prototype = new Entity();
CenterThingy.prototype.constructor = Background;
CenterThingy.prototype.update = function () { }
CenterThingy.prototype.draw = function (ctx) {
    ctx.fillStyle = "blue";
    ctx.fillRect(395, 395, 10, 10);
    Entity.prototype.draw.call(this);
}
/*----------------------------------------------Debug Stuff End-------------------------------------------------------------------------------------------- */

/*----------------------------------------------Main Code Start-------------------------------------------------------------------------------------------- */
// the "main" code begins here
var gameEngine;
var damgeST;
let character;
let sorcererVillain;
let slimeBehemoth;
let slimeEnemy;
let wizard;
let skeleton;
let torch;
let sKey;
let gKey;
let hPotion;
let sJar;
let canvas;
var ctx;
var ASSET_MANAGER = new AssetManager();

function startGame() {
    document.getElementById('start-game').hidden = true;
    ASSET_MANAGER.queueDownload("./img/DungeonBackgroundSpriteSheet.png");
    ASSET_MANAGER.queueDownload("./img/spritesheet.png");
    ASSET_MANAGER.queueDownload("./img/characterIdleAnimation.png");
	ASSET_MANAGER.queueDownload('./img/ChatacterAttackRanged.png');
    ASSET_MANAGER.queueDownload("./img/CharacterForwardRun.png");
    ASSET_MANAGER.queueDownload("./img/characterBackwardRun.png");
    ASSET_MANAGER.queueDownload("./img/characterRightAnimation.png");
    ASSET_MANAGER.queueDownload("./img/characterLeftAnimation.png");
    ASSET_MANAGER.queueDownload("./img/characterRightAttack.png");
    ASSET_MANAGER.queueDownload("./img/characterLeftAttack.png");
    ASSET_MANAGER.queueDownload("./img/characterUpAttack.png");
    ASSET_MANAGER.queueDownload("./img/characterDownAttack.png");
    ASSET_MANAGER.queueDownload("./img/characterWhirlWindAttackAnimation.png");
    ASSET_MANAGER.queueDownload("./img/sorcererVillain.png");
    ASSET_MANAGER.queueDownload("./img/torchAnimation.png");
    ASSET_MANAGER.queueDownload("./img/SilverKeyAnimation.png");
    ASSET_MANAGER.queueDownload("./img/GoldKeyAnimation.png");
    ASSET_MANAGER.queueDownload("./img/HealthPotionAnimation.png");
    ASSET_MANAGER.queueDownload("./img/SoulJarAnimation.png");
    ASSET_MANAGER.queueDownload("./img/SlimeBehemothWalkingLeft.png");
    ASSET_MANAGER.queueDownload("./img/SlimeBehemothWalkingRight.png");
	ASSET_MANAGER.queueDownload("./img/SlimeBehemothAttackLeft.png");
    ASSET_MANAGER.queueDownload("./img/SlimeBehemothAttackRight.png");
    ASSET_MANAGER.queueDownload("./img/SlimeWalkLeft.png");
    ASSET_MANAGER.queueDownload("./img/SlimeWalkRight.png");
	ASSET_MANAGER.queueDownload("./img/SlimeAttackLeft.png");
    ASSET_MANAGER.queueDownload("./img/SlimeAttackRight.png");
	ASSET_MANAGER.queueDownload("./img/SlimeIdle.png");
    ASSET_MANAGER.queueDownload("./img/SlimeDeath.png");
    ASSET_MANAGER.queueDownload("./img/wizardWalkLeft.png");
    ASSET_MANAGER.queueDownload("./img/wizardWalkRight.png");
	ASSET_MANAGER.queueDownload("./img/wizardAttackLeft.png");
    ASSET_MANAGER.queueDownload("./img/wizardAttackRight.png");
	ASSET_MANAGER.queueDownload("./img/wizardMagicSpellDown.png");
	ASSET_MANAGER.queueDownload("./img/wizardMagicSpellUp.png");
	ASSET_MANAGER.queueDownload("./img/wizardMagicSpellLeft.png");
	ASSET_MANAGER.queueDownload("./img/wizardMagicSpellRight.png");
	ASSET_MANAGER.queueDownload("./img/wizardIdle.png");
    ASSET_MANAGER.queueDownload("./img/wizardDeath.png");
    ASSET_MANAGER.queueDownload("./img/SkeletonWalkLeft.png");
    ASSET_MANAGER.queueDownload("./img/SkeletonWalkRight.png");
    ASSET_MANAGER.queueDownload("./img/characterInfo.png");
    ASSET_MANAGER.queueDownload("./img/HP.png");
    ASSET_MANAGER.downloadAll(function () {
        console.log("starting up da sheild");
        canvas = document.getElementById("viewport");
        ctx = canvas.getContext("2d");
        ctx.imageSmoothingEnabled = false;

        // Creates new entity instances
        gameEngine = new GameEngine(ctx, ctx.canvas.width, ctx.canvas.height);
        var bg = new Background(ASSET_MANAGER.getAsset("./img/DungeonBackgroundSpriteSheet.png"));
        var chInfo = new CharacterInfo(ASSET_MANAGER.getAsset("./img/characterInfo.png"), ASSET_MANAGER.getAsset("./img/HP.png"));
        damgeST = new damgeStat();
        var torches = [];
        var sKeys = [];
        var gKeys = [];
        var hPotions = [];
        var sJars = [];
        var slimeBehemoths = [];
        var slimeEnemies = [];
        var skeletons = [];
        var wizards = [];
        var sorcererVillains = [];
        // generates an array that will generate each entity in the right spots.
        for (var i = 0; i < slimeDungeonLevelOneEntities.length; i++) {
            if (slimeDungeonLevelOneEntities[i] == 1) {
                var torchX = (i % 88) * 48;
                var torchY = (Math.floor(i / 88)) * 48; // (i / number of blocks long - 1) * scale
                var torch = new Torch(torchX, torchY);
                torches.push(torch);
            }
            if (slimeDungeonLevelOneEntities[i] == 2) {
                var sKeyX = (i % 88) * 48;
                var sKeyY = (Math.floor(i / 88)) * 48; // (i / number of blocks long - 1) * scale
                var sKey = new SilverKey(sKeyX, sKeyY);
                sKeys.push(sKey);
            }
            if (slimeDungeonLevelOneEntities[i] == 3) {
                var gKeyX = (i % 88) * 48;
                var gKeyY = (Math.floor(i / 88)) * 48; // (i / number of blocks long - 1) * scale
                var gKey = new GoldKey(gKeyX, gKeyY);
                gKeys.push(gKey);
            }
            if (slimeDungeonLevelOneEntities[i] == 4) {
                var hPotionX = (i % 88) * 48;
                var hPotionY = (Math.floor(i / 88)) * 48; // (i / number of blocks long - 1) * scale
                var hPotion = new HealingPotion(hPotionX, hPotionY);
                hPotions.push(hPotion);
            }
            if (slimeDungeonLevelOneEntities[i] == 5) {
                var sJarX = (i % 88) * 48;
                var sJarY = (Math.floor(i / 88)) * 48; // (i / number of blocks long - 1) * scale
                var sJar = new SoulJar(sJarX, sJarY);
                sJars.push(sJar);
            }
            if (slimeDungeonLevelOneEntities[i] == 11) {
                var svX = (i % 88) * 48;
                var svY = (Math.floor(i / 88)) * 48; // (i / number of blocks long - 1) * scale
                var sv = new SorcererVillain(gameEngine, svX, svY);
                sorcererVillains.push(sv);
            }
            if (slimeDungeonLevelOneEntities[i] == 12) {
                var seX = (i % 88) * 48;
                var seY = (Math.floor(i / 88)) * 48; // (i / number of blocks long - 1) * scale
                var se = new SlimeEnemy(seX, seY);
                slimeEnemies.push(se);
            }
            if (slimeDungeonLevelOneEntities[i] == 13) {
                var sbX = (i % 88) * 48;
                var sbY = (Math.floor(i / 88)) * 48; // (i / number of blocks long - 1) * scale
                var sb = new SlimeBehemoth(sbX, sbY);
                slimeBehemoths.push(sb);
            }
            if (slimeDungeonLevelOneEntities[i] == 14) {
                var wizardX = (i % 88) * 48;
                var wizardY = (Math.floor(i / 88)) * 48; // (i / number of blocks long - 1) * scale
                var wizard = new Wizard(gameEngine, wizardX, wizardY);
                wizards.push(wizard);
            }
            if (slimeDungeonLevelOneEntities[i] == 15) {
                var skeletonX = (i % 88) * 48;
                var skeletonY = (Math.floor(i / 88)) * 48; // (i / number of blocks long - 1) * scale
                var skeleton = new Skeleton(gameEngine, skeletonX, skeletonY);
                skeletons.push(skeleton);
            }
            if (slimeDungeonLevelOneEntities[i] == 10) { // for the player character
                var characterStartingX = (i % 88) * 48;
                var characterStartingY = (Math.floor(i / 88)) * 48; // (i / number of blocks long - 1) * scale
            }
        }
        character = new Character();

        var centerthingy = new CenterThingy();

        // Adding the entities
        gameEngine.addEntity(bg);

        for (var i = 0; i < torches.length; i++) {
            gameEngine.addEntity(torches[i]);
        }
        for (var i = 0; i < sKeys.length; i++) {
            gameEngine.addEntity(sKeys[i]);
        }
        for (var i = 0; i < gKeys.length; i++) {
            gameEngine.addEntity(gKeys[i]);
        }
        for (var i = 0; i < hPotions.length; i++) {
            gameEngine.addEntity(hPotions[i]);
        }
        for (var i = 0; i < sJars.length; i++) {
            gameEngine.addEntity(sJars[i]);
        }
        for (var i = 0; i < slimeEnemies.length; i++) {
            gameEngine.addEntity(slimeEnemies[i]);
        }
        for (var i = 0; i < slimeBehemoths.length; i++) {
            gameEngine.addEntity(slimeBehemoths[i]);
        }
        for (var i = 0; i < wizards.length; i++) {
            gameEngine.addEntity(wizards[i]);
        }
        for (var i = 0; i < skeletons.length; i++) {
            gameEngine.addEntity(skeletons[i]);
        }
        for (var i = 0; i < sorcererVillains.length; i++) {
            gameEngine.addEntity(sorcererVillains[i]);
        }

        // Sounds and effects.
        // gameEngine.sounds.set('musicTitle01', new Sound("01_BROKEN_DESTINY.mp3", true));
        // gameEngine.sounds.set('musicTitle02', new Sound("02_BATTLE_CRY.mp3", true));
        gameEngine.sounds.set('dungeon1', new Sound('lost_mine.mp3', true));
        gameEngine.sounds.set('characterAttack01', new Sound("player_attack.wav"));
        gameEngine.sounds.set('characterAttack02', new Sound("player_whirlwind_attack.wav"));
        gameEngine.sounds.get('dungeon1').play(); // This is the first thing that plays during starting the game.

        gameEngine.addEntity(character);
        if (gameEngine.debug) gameEngine.addEntity(centerthingy);
        gameEngine.addEntity(chInfo);
        gameEngine.addEntity(damgeST);
        gameEngine.debug = false;
        character.updateViewport();

        // Starting up the game
        gameEngine.init();
        gameEngine.start();
    });
}
